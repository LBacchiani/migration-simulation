module Migration;
export *;
import * from ABS.DC;
import * from Architecture;

interface Migration{
	List<IData_Collector> getIData_Collector();
	List<IData_Processor> getIData_Processor();
	List<IData_Alert> getIData_Alert();
	List<IStorage> getIStorage();
	List<DeploymentComponent> getDeploymentComponent();
	Unit deploy();
	Unit undeploy();
}

class Migration(DeploymentComponent vm, IData_Collector data_collector, IData_Alert data_alert, IStorage storage) implements Migration{

	List<List<IData_Collector>> ls_ls_IData_Collector = Nil;
	List<IData_Collector> ls_IData_Collector = Nil;
	List<List<IData_Processor>> ls_ls_IData_Processor = Nil;
	List<IData_Processor> ls_IData_Processor = Nil;
	List<List<IData_Alert>> ls_ls_IData_Alert = Nil;
	List<IData_Alert> ls_IData_Alert = Nil;
	List<List<IStorage>> ls_ls_IStorage = Nil;
	List<IStorage> ls_IStorage = Nil;
	List<List<DeploymentComponent>> ls_ls_DeploymentComponent = Nil;
	List<DeploymentComponent> ls_DeploymentComponent = Nil;
	List<IData_Collector> getIData_Collector() { return ls_IData_Collector; }
	List<IData_Processor> getIData_Processor() { return ls_IData_Processor; }
	List<IData_Alert> getIData_Alert() { return ls_IData_Alert; }
	List<IStorage> getIStorage() { return ls_IStorage; }
	List<DeploymentComponent> getDeploymentComponent() { return ls_DeploymentComponent; }

	Unit deploy() {
		ls_ls_IData_Collector = Cons(ls_IData_Collector,ls_ls_IData_Collector);
		ls_IData_Collector = Nil;
		ls_ls_IData_Processor = Cons(ls_IData_Processor,ls_ls_IData_Processor);
		ls_IData_Processor = Nil;
		ls_ls_IData_Alert = Cons(ls_IData_Alert,ls_ls_IData_Alert);
		ls_IData_Alert = Nil;
		ls_ls_IStorage = Cons(ls_IStorage,ls_ls_IStorage);
		ls_IStorage = Nil;
		ls_ls_DeploymentComponent = Cons(ls_DeploymentComponent,ls_ls_DeploymentComponent);
		ls_DeploymentComponent = Nil;
		this.deploy_aux();
	}

	Unit undeploy() {
		if (ls_ls_DeploymentComponent != Nil) {
			this.undeploy_aux();
			ls_DeploymentComponent = head(ls_ls_DeploymentComponent);
			ls_ls_DeploymentComponent = tail(ls_ls_DeploymentComponent);
			ls_IData_Collector = head(ls_ls_IData_Collector);
			ls_IData_Processor = head(ls_ls_IData_Processor);
			ls_IData_Alert = head(ls_ls_IData_Alert);
			ls_IStorage = head(ls_ls_IStorage);
			ls_ls_IData_Collector = tail(ls_ls_IData_Collector);
			ls_ls_IData_Processor = tail(ls_ls_IData_Processor);
			ls_ls_IData_Alert = tail(ls_ls_IData_Alert);
			ls_ls_IStorage = tail(ls_ls_IStorage);
		}
	}


	Unit deploy_aux() {
		[DC: vm] IData_Processor odefault___Data_Processor_0____30a5013db8be43998265bb8d8a10c781_0 = new Data_Processor(data_collector, storage);
		ls_IData_Processor = Cons(odefault___Data_Processor_0____30a5013db8be43998265bb8d8a10c781_0, ls_IData_Processor);
		data_alert.connect_data_processor(odefault___Data_Processor_0____30a5013db8be43998265bb8d8a10c781_0);
	}

	Unit undeploy_aux() {
		IData_Processor odefault___Data_Processor_0____30a5013db8be43998265bb8d8a10c781_0 = nth(ls_IData_Processor,0);
		data_alert.diconnect_data_processor();
	}
}
