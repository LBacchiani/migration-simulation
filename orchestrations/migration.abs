module Migration;
export *;
import * from ABS.DC;
import * from Architecture;

interface Migration{
	List<IData_Processor> getIData_Processor();
	List<DeploymentComponent> getDeploymentComponent();
	Unit deploy();
	Unit undeploy();
}

class Migration(CloudProvider cloudProvider, DeploymentComponent edge, IData_Collector data_collector, IData_Alert data_alert, IStorage storage) implements Migration{

	List<List<IData_Processor>> ls_ls_IData_Processor = Nil;
	List<IData_Processor> ls_IData_Processor = Nil;
	List<List<DeploymentComponent>> ls_ls_DeploymentComponent = Nil;
	List<DeploymentComponent> ls_DeploymentComponent = Nil;
	Rat waiting_time = 0;
	{
	}

	List<IData_Processor> getIData_Processor() { return ls_IData_Processor; }
	List<DeploymentComponent> getDeploymentComponent() { return ls_DeploymentComponent; }

	Unit deploy() {
		ls_ls_IData_Processor = Cons(ls_IData_Processor,ls_ls_IData_Processor);
		ls_IData_Processor = Nil;
		ls_ls_DeploymentComponent = Cons(ls_DeploymentComponent,ls_ls_DeploymentComponent);
		ls_DeploymentComponent = Nil;
		this.deploy_aux();
	}

	Unit undeploy() {
		if (ls_ls_DeploymentComponent != Nil) {
			this.undeploy_aux();
			ls_DeploymentComponent = head(ls_ls_DeploymentComponent);
			ls_ls_DeploymentComponent = tail(ls_ls_DeploymentComponent);
				ls_IData_Processor = head(ls_ls_IData_Processor);
			ls_ls_IData_Processor = tail(ls_ls_IData_Processor);
		}
	}


	Unit deploy_aux() {
		Map<DeploymentComponent,Rat> speedPatchMap = map[];
		[DC: edge] IData_Processor odefault___Data_Processor_0____5f2acce2d5c442bd993727a5dec24d1c_0 = new Data_Processor(data_collector, storage);
		Rat coreRequired_odefault___Data_Processor_0____5f2acce2d5c442bd993727a5dec24d1c_0 = 2;
		//speedPatchMap = put(speedPatchMap, edge, fromJust(lookup(speedPatchMap,edge)) + coreRequired_odefault___Data_Processor_0____5f2acce2d5c442bd993727a5dec24d1c_0);
		ls_IData_Processor = Cons(odefault___Data_Processor_0____5f2acce2d5c442bd993727a5dec24d1c_0, ls_IData_Processor);
		//this!patchSpeed(speedPatchMap);
		//await duration(waiting_time,waiting_time);
		data_alert.connect_data_processor(odefault___Data_Processor_0____5f2acce2d5c442bd993727a5dec24d1c_0);
	}

	Unit undeploy_aux() {
		IData_Processor odefault___Data_Processor_0____5f2acce2d5c442bd993727a5dec24d1c_0 = nth(ls_IData_Processor,0);
		data_alert.diconnect_data_processor();
		while ( !isEmpty(ls_DeploymentComponent) ) {
			cloudProvider.shutdownInstance(head(ls_DeploymentComponent));
			ls_DeploymentComponent = tail(ls_DeploymentComponent);
		}
	}

	Unit patchSpeed(Map<DeploymentComponent,Rat> dcs) {
		foreach(entry in entries(dcs)) {
			DeploymentComponent dc = fst(entry);
			Rat coreUsed = snd(entry);
			InfRat speed_aux = await dc!total(Speed);
			Rat total_speed = case speed_aux {
				Fin(x) => x;
				_ => -1;
			};
			if(total_speed != -1) {
				Rat totalCore = await dc!getNumberOfCores();
				Rat speedPerCore = total_speed / totalCore;
				dc!decrementResources(total_speed - (speedPerCore * coreUsed), Speed);
			}
		}
	}
}