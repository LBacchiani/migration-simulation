module Architecture;

export *;

import * from Param;
import * from ABS.DC;
import * from ABS.SmartDeploy;

[SmartDeployCloudProvider: "{\"vm\" : {\"cost\" : 100, \"payment_interval\" : 1, \"resources\" : { \"Cores\" : 4, \"Memory\" : 500, \"Bandwidth\" : 1000, \"Speed\" : 10, \"Startupduration\" : 0}}}"]

// [SmartDeploy : "{\"id\":\"Setup\",\"specification\":\"Data_Alert = 1 and Data_Collector = 1 and DP_NodePort = 1\", \"DC\":[], \"obj\":[{\"name\":\"id\",\"interface\":\"Int\",\"provides\":[{\"ports\":[\"Int\"],\"num\":-1}],\"methods\" : []}], \"cloud_provider_DC_availability\":{\"vm\" : 1},\"bind preferences\":[\"local\"]}"]

// [SmartDeploy : "{\"id\":\"ToCloudMigration\",\"specification\":\"Data_Processor = 1\", \"DC\":[], \"obj\":[{\"name\":\"data_collector\",\"interface\":\"IData_Collector\",\"provides\":[{\"ports\":[\"IData_Collector\"],\"num\":-1}],\"methods\" : []}, {\"name\":\"np\",\"interface\":\"IDP_NodePort\",\"provides\":[{\"ports\":[\"IDP_NodePort\"],\"num\":-1}],\"methods\" : [{\"add\" : {\"name\" : \"connect\",\"param_type\" : \"IData_Processor\"},  \"remove\" : {\"name\" : \"disconnect\",\"return_type\" : \"IData_Processor\"}}]}], \"cloud_provider_DC_availability\":{\"vm\" : 1},\"bind preferences\":[\"((forall ?x of type Data_Processor in '.*' :  forall ?y of type np in '.*' : ?x used by ?y))\"]}"]

[SmartDeploy : "{\"id\":\"ToEdgeMigration\",\"specification\":\"Data_Processor = 1\", \"DC\":[], \"obj\":[{\"name\":\"data_collector\",\"interface\":\"IData_Collector\",\"provides\":[{\"ports\":[\"IData_Collector\"],\"num\":-1}],\"methods\" : []}, {\"name\":\"np\",\"interface\":\"IDP_NodePort\",\"provides\":[{\"ports\":[\"IDP_NodePort\"],\"num\":-1}],\"methods\" : [{\"add\" : {\"name\" : \"connect\",\"param_type\" : \"IData_Processor\"},  \"remove\" : {\"name\" : \"disconnect\",\"return_type\" : \"IData_Processor\"}}]}], \"cloud_provider_DC_availability\":{\"vm\" : 1},\"bind preferences\":[\"((forall ?x of type Data_Processor in '.*' :  forall ?y of type np in '.*' : ?x used by ?y))\"]}"]

[SmartDeployCost : "{\"class\" : \"Data_Alert\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 1,\"Memory\" : 50}, \"sig\":[{\"kind\" : \"require\",\"type\" : \"IDP_NodePort\"}], \"methods\" : []}]}"]
interface IData_Alert {}

class Data_Alert(IDP_NodePort np) implements IData_Alert {
    Unit run() {
        while(True) {
            await duration(req_inverval());
            np!dispatch();
        }
    }
}

[SmartDeployCost : "{\"class\" : \"Data_Collector\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 1,\"Memory\" : 100}, \"sig\":[{\"kind\" : \"require\",\"type\" : \"Int\"}], \"methods\" : []}]}"]
interface IData_Collector {
    String fetch_data();
    Rat fetch_data_size();
    Unit setSize(String z);
}

class Data_Collector(Int id) implements IData_Collector {

    Int index = 0;
    Rat size = 1;

    Unit setSize(String z) {
        Rat p = random(1000) / 1000;
        p = p * 100;
        Rat prob = error_prob(nth(nth(sizes(),id), index % size_length()));
        if(p < prob) await duration(req_inverval());
        size = nth(nth(sizes(),id), index % size_length());
        index = index + 1;
    }
    
    String fetch_data() {return "Some data";}

    Rat fetch_data_size() {return size;}
}

interface IDP_NodePort {
    Unit dispatch();
    Unit connect(IData_Processor dp);
    IData_Processor disconnect();
}

[SmartDeployCost : "{\"class\" : \"DP_NodePort\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 1,\"Memory\" : 50}, \"sig\":[], \"methods\" : [{\"add\" : {\"name\" : \"connect\",\"param_type\" : \"IData_Processor\"}, \"remove\" : {\"name\" : \"diconnect\", \"return_type\" : \"IData_Processor\"}}]}]}"]
class DP_NodePort implements IDP_NodePort {
    
    List<IData_Processor> instances = list[];

    Unit dispatch() {
        IData_Processor selected = nth(instances, 0);
        selected!request();
    }

    Unit connect(IData_Processor dp) {instances = appendright(instances, dp);}

    IData_Processor disconnect() {
        IData_Processor removedInstance = nth(instances, 0);
        instances = without(instances, removedInstance);
        return removedInstance;
    }
}

interface IData_Processor {
    Unit request();
    Pair<Rat,Rat> getStats();
    Unit resetStats();
}

[SmartDeployCost : "{\"class\" : \"Data_Processor\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 1,\"Memory\" : 100},\"sig\" : [{\"kind\" : \"require\",\"type\" : \"IData_Collector\"}], \"methods\" : []}]}"]
class Data_Processor(IData_Collector data_collector) implements IData_Processor {

    Rat totLat = 0;
    Rat totByte = 0;
    Rat avgLat = 0;
    Rat avgByte = 0;
    Rat n_req = 0;

     Pair<Rat,Rat> getStats() {return Pair(avgLat, avgByte);}

     Unit resetStats() {
        totLat = 0;
        totByte = 0;
        n_req = 0;
        avgLat = 0;
        avgByte = 0;
     }

    Unit request() {
        DC dc = thisDC();
        String name = dc.getName();
        Rat data_size = await data_collector!fetch_data_size();
        Rat to_receive = compute_data_size_to_send(data_size);
        Rat bandwidth_to_use = predict_bandwidth(data_size);
        Rat normalized_data_size = to_receive + (to_receive * (bandwidth() - bandwidth_to_use)/bandwidth_to_use);
        String z = "edge";
        Time start = now();
        [DataSize: normalized_data_size] data_collector!fetch_data();
        Rat time_elapsed = timeDifference(start,now());
        if(substr(name, 7, 5) == "cloud") {
            z = "cloud";
            Rat speed = this.getSpeed(dc);
            [Cost: time_elapsed * (slowdown_factor() - 1) * speed] skip;
        }
        time_elapsed = timeDifference(start,now());
        n_req = n_req + 1;
        totLat = totLat + time_elapsed;
        totByte = totByte + to_receive;
        avgLat = totLat / n_req;
        avgByte = totByte / n_req;
    }

    Rat getSpeed(DC dc) {
        InfRat tmp = dc.total(Speed);
        Rat speed = 0;
        switch(tmp) {
            Fin(x) => speed = x;
            _ => speed = -1;
        }
        return speed;
    }
}
