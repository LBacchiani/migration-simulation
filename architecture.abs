module Architecture;

export *;

import * from Param;
import * from ABS.DC;
import * from ABS.SmartDeploy;

//[SmartDeployCloudProvider: "{\"edge\" : {\"cost\" : 100, \"payment_interval\" : 1, \"resources\" : { \"Cores\" : 2, \"Memory\" : 375, \"Bandwidth\" : 500, \"Speed\" : 10, \"Startupduration\" : 100}} , \"cloud\" : { \"cost\" : 199, \"payment_interval\" : 1, \"resources\" : { \"Cores\" : 4, \"Memory\" : 750, \"Bandwidth\" : 500, \"Speed\" : 20, \"Startupduration\" : 100}}}"]

[SmartDeploy : "{\"id\":\"Migration\",\"specification\":\"Data_Processor = 1\", \"DC\":[{\"name\":\"vm\", \"Cores\" : 4, \"Memory\" : 750, \"Speed\" : 20}], \"obj\":[{\"name\":\"data_collector\",\"interface\":\"IData_Collector\",\"provides\":[{\"ports\":[\"IData_Collector\"],\"num\":-1}],\"methods\" : []}, {\"name\":\"data_alert\",\"interface\":\"IData_Alert\",\"provides\":[{\"ports\":[\"IData_Alert\"],\"num\":-1}],\"methods\" : [{\"add\" : {\"name\" : \"connect_data_processor\",\"param_type\" : \"IData_Processor\"},  \"remove\" : {\"name\" : \"diconnect_data_processor\",\"return_type\" : \"IData_Processor\"}}]}, {\"name\":\"storage\",\"interface\":\"IStorage\",\"provides\":[{\"ports\":[\"IStorage\"],\"num\":-1}],\"methods\" : []}], \"cloud_provider_DC_availability\":{},\"bind preferences\":[\"((forall ?x of type Data_Processor in '.*' :  forall ?y of type data_alert in '.*' : ?x used by ?y))\"]}"]

//[SmartDeployCost : "{\"class\" : \"Data_Alert\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 1,\"Memory\" : 50}, \"sig\":[], \"methods\" : [{\"add\" : {\"name\" : \"connect_data_processor\",\"param_type\" : \"IData_Processor\"}, \"remove\" : {}}]}]}"]
interface IData_Alert {
    Unit connect_data_processor(IData_Processor processor);
    IData_Processor diconnect_data_processor();
}

class Data_Alert() implements IData_Alert {
    IData_Processor data_processor;
    Unit run() {
        while(True) {
            await duration(req_inverval(), req_inverval());
            if(data_processor != null )data_processor!request();
            else println("Data Processor not connected");
        }
    }

    Unit connect_data_processor(IData_Processor processor) {data_processor = processor;}

    IData_Processor diconnect_data_processor() {
        IData_Processor tmp = data_processor;
        data_processor = null;
        return tmp;
    }
}

//[SmartDeployCost : "{\"class\" : \"Data_Collector\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 1,\"Memory\" : 50}, \"sig\":[], \"methods\" : []}]}"]
interface IData_Collector {
    String fetch_data();
    Rat fetch_data_size();
}

class Data_Collector implements IData_Collector{
    Int curr = 0;
    
    String fetch_data() {return "Some data";}

    Rat fetch_data_size() {
        Rat byte_size = nth(sizes(), truncate(curr / 3) % length(sizes()));
        Rat to_send = compute_data_size_to_send(byte_size);
        curr = curr + 1; 
        return to_send;
    }
}

interface IData_Processor{
    Unit request();
}

[SmartDeployCost : "{\"class\" : \"Data_Processor\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 2,\"Memory\" : 200},\"sig\" : [{\"kind\" : \"require\",\"type\" : \"IData_Collector\"}, {\"kind\" : \"require\",\"type\" : \"IStorage\"}], \"methods\" : []}]}"]
class Data_Processor(IData_Collector data_collector, IStorage storage) implements IData_Processor {
    Unit request() {
        Time start = now();
        DC dc = thisDC();
        Rat data_size = data_collector.fetch_data_size();
        Rat increment = this.from_transmission_time_to_additional_data_size(dc);
        [DataSize: data_size + increment] data_collector!fetch_data(); //we need to take into account the distance between sender and receiver
        Rat time_elapsed = timeDifference(start,now());
        storage!store_values(time_elapsed, data_size);
    }

    Rat from_transmission_time_to_additional_data_size(DC dc) {
        Rat bandwith = this.getBandwidth(dc);
        Rat increment = 0;
        if(bandwith == cloud_bandwidth()) increment = cloud_bandwidth() * cloudDistance()/propagationSpeed();
        else increment = edge_bandwidth() * edgeDistance()/propagationSpeed();
        return increment;
    }

    Rat getBandwidth(DC dc) {
        InfRat tmp = dc.total(Bandwidth);
        Rat bandwith = 0;
        switch(tmp) {
            Fin(x) => bandwith = x;
            _ => bandwith = -1;
        }
        return bandwith;
    }

    //explanation of how DataSize is computed
    //latency_tot = transmission time + propagation time + some other neglectable suff (queuing time...)
    //transmission time = data size / bandwith 
    //propagation time = distance / propagation speed
    //for technical reason we need to model the above into DataSize
    //given that bandwith is fixed, we can only modify data_size to 
    //model the above. Being x the new data size to find, 
    //latency_tot = x/bandwith = data_size/bandwith + distance/propagation_speed
    //=> x = data_size + (distance * bandwith) / propagation_time
}

//////////STORAGE////////

interface IStorage {
    Unit store_values(Rat latency, Rat size);
    List<Rat> get_latency_timeserie();
    List<Rat> get_size_timeserie();
}

class Storage() implements IStorage {
    List<Rat> latency_timeserie = list[];
    List<Rat> size_timeserie = list[];

    
    Unit store_values(Rat latency, Rat size) {
        this.add_latency_value(latency);
        this.add_size_value(size);
    }

    List<Rat> get_latency_timeserie() {return latency_timeserie;}

    List<Rat> get_size_timeserie() {return size_timeserie;}

    //private methods

    Unit add_latency_value(Rat value) {latency_timeserie = appendright(latency_timeserie, value);}

    Unit add_size_value(Rat value) {size_timeserie = appendright(size_timeserie, value);} 
}