module Storage;

export *;
import * from Data_Collector;
import * from Data_Alert;

interface IStorage {
    Unit store_values(Rat latency, Rat size);
    List<Rat> get_latency_timeserie();

    List<Rat> get_size_timeserie();
    IData_Collector get_data_collector_ref();
    IData_Alert get_data_alert_ref();
    Unit set_data_collector_ref(IData_Collector collector);
    Unit set_data_alert_ref(IData_Alert alert);
}

class Storage() implements IStorage {
    List<Rat> latency_timeserie = list[];
    List<Rat> size_timeserie = list[];
    IData_Collector data_collector;
    IData_Alert data_alert;

    
    Unit store_values(Rat latency, Rat size) {
        this.add_latency_value(latency);
        this.add_size_value(size);
    }

    List<Rat> get_latency_timeserie() {return latency_timeserie;}

    List<Rat> get_size_timeserie() {return size_timeserie;}

    IData_Collector get_data_collector_ref() {return data_collector;}

    IData_Alert get_data_alert_ref() {return data_alert;}

    Unit set_data_collector_ref(IData_Collector collector) {data_collector = collector;}

    Unit set_data_alert_ref(IData_Alert alert) {data_alert = alert;}

    //private methods

    Unit add_latency_value(Rat value) {latency_timeserie = appendright(latency_timeserie, value);}

    Unit add_size_value(Rat value) {size_timeserie = appendright(size_timeserie, value);} 
}