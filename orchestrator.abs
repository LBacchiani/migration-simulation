module Orchestrator;

export *;

import * from ABS.DC;
import * from Architecture;
import * from Param;
import * from ToEdgeMigration;
import * from ToCloudMigration;



interface IOrchestrator {}

class Orchestrator(List<ToEdgeMigration> edge_migrations,  List<ToCloudMigration> cloud_migrations, List<String> zs, Map<Int, IData_Processor> processors, Map<Int, IData_Collector> collectors) implements IOrchestrator {

    List<String> zones = zs;
    Int time = 0;

    Unit run() {
        while(time < 16) {
            await duration(monitoring_inverval());
            List<Pair<Rat,Rat>> stats = await this!avgStats();
            this.log(stats, zones);
            List<Rat> average_lats = map((Pair<Rat,Rat> p) => fst(p))(stats);
            List<Rat> average_sizes = map((Pair<Rat,Rat> p) => snd(p))(stats);

            //LATENCY BASED POLICY////
            // Int move = await this!service_to_move_lookup(average_lats); 
            // Rat max_lat = nth(average_lats, move);
            // Rat size = nth(average_sizes, move);
            // if(max_lat > lat_threshold_to_edge() || max_lat == -1) {
            //     Bool edge_free = await this!isEdgeFree();
            //     if(edge_free) this!move_to_edge(move);
            //     else {
            //         Int toCloud = await this!edge_index_lookup();
            //         if(toCloud != move) {
            //             this!move_to_cloud(toCloud);
            //             this!move_to_edge(move);
            //         }
            //     }
            // }
            // else if(nth(zones, move) == "edge" && max_lat < lat_threshold_to_cloud() && size < size_threshold()) this!move_to_cloud(move);
            ///////

            //SIZE BASED POLICY/////
            Int move = await this!service_to_move_lookup(average_sizes); 
            Rat max_size = nth(average_sizes, move);
            if(max_size > size_threshold() || max_size == -1) {
                Bool edge_free = await this!isEdgeFree();
                if(edge_free) this!move_to_edge(move);
                else {
                    Int toCloud = await this!edge_index_lookup();
                    if(toCloud != move) {
                        this!move_to_cloud(toCloud);
                        this!move_to_edge(move);
                    }
                }
            }
            else if(nth(zones, move) == "edge" && max_size < size_threshold()) this!move_to_cloud(move);
            ///////

            time = time + 1;
            this!resetStats();
            if(time % 2 == 0) this!update_sizes();
        }
        println("-------");
    }

    List<Pair<Rat,Rat>> avgStats() {
        List<Pair<Rat,Rat>> stats = list[];
        foreach(v in values(processors)) {
            Pair<Rat,Rat> s = await v!getStats();
            stats = appendright(stats,s);
        }
        return stats;
    }

    Unit resetStats() {foreach(v in values(processors)) v!resetStats();}

    Unit update_sizes() {foreach(v,i in values(collectors)) v!setSize(nth(zones,i));}

    Int service_to_move_lookup(List<Rat> values) {
        Rat max_value = -2;
        Int i = 0;
        Int toMove = -1;
        while(i < n_pipelines()) {
            Rat curr_val = nth(values, i);
            if(curr_val == -1) {
                toMove = i;
                i = n_pipelines();
            } else {
                if(max_value < curr_val) {
                    max_value = curr_val;
                    toMove = i; 
                }
            }
            i = i + 1;
        }
        return toMove;
    }

    Bool isEdgeFree() {return length(filter((String z) => z == "edge")(zones)) == 0;}

    Unit move_to_edge(Int i) {
        nth(edge_migrations, i)!deploy();
        nth(cloud_migrations,i)!undeploy();
        List<IData_Processor> edge = await nth(edge_migrations, i)!getIData_Processor();
        processors = put(processors, i, head(edge));
        this!update_zones(i, "edge");
    }

    Unit move_to_cloud(Int i) {
        nth(cloud_migrations, i)!deploy();
        nth(edge_migrations,i)!undeploy();
        List<IData_Processor> cloud = await nth(cloud_migrations, i)!getIData_Processor();
        processors = put(processors, i, head(cloud));
        this!update_zones(i, "cloud");
    }

    Int edge_index_lookup() {
        Int target = -1;
        foreach(z,i in zones) {
            if(z == "edge") target = i;
        }
        return target;
    }

    Unit update_zones(Int update, String z) {
        List<String> tmp = list[];
        Int i = 0;
         while(i < n_pipelines()) {
            if(i != update) tmp = appendright(tmp, nth(zones, i));
            else tmp = appendright(tmp, z);
            i = i + 1;
         }
         zones = tmp;
    }

    Unit log(List<Pair<Rat,Rat>> stats, List<String> zones) {
         String toPrint = "";
         Int i = 0;
         while(i < n_pipelines()) {
            toPrint = toPrint + "Pipeline" + toString(i+1) + "[zone:" + nth(zones,i) + "]:"; 
            Float avg_size_mb = float(snd(nth(stats,i)) / pow(10,6));
            Float avg_lat_ms = float(1000 * fst(nth(stats,i)) / sec_to_time_unit());
            if(avg_lat_ms >= 0.0 && avg_size_mb >= 0.0) toPrint = toPrint + "(" + toString(avg_lat_ms) + "," + toString(avg_size_mb) + ") ";
            // else {
            //     String zone = nth(zones,i);
            //     Rat t = 0;
            //     Int index = nth(storages,i).getIndex();
            //     Rat bytes = nth(nth(sizes(),i),index) * nth(nth(sizes(),i),index) * byte_header_size() / pow(10,6);
            //     if(zone == "cloud") t = 1000 * bytes * pow(10,6) / (sec_to_time_unit() * bandwidth());
            //     else t = 1000 * bytes * pow(10,6) / (sec_to_time_unit() * bandwidth());
            //     toPrint = toPrint + "(" + toString(float(t)) + "," + toString(float(bytes)) + ") ";
            // }
            i = i + 1;
         }
         println(toPrint);
    }
}