module Monitor;

export *;

import * from ABS.DC;
import * from Architecture;
import * from Param;
import * from ToEdgeMigration;
import * from ToCloudMigration;



interface IMonitor {}

class Monitor(List<ToEdgeMigration> edge_migrations,  List<ToCloudMigration> cloud_migrations, List<String> zs, List<IStorage> storages) implements IMonitor {

    List<String> zones = zs;
    Int time = 0;

    Unit run() {
        while(time < 16) {
            await duration(monitoring_inverval(), monitoring_inverval());
            List<List<Rat>> pipeline_latencies = this.fetch_metric("latency");
            List<List<Rat>> pipeline_sizes = this.fetch_metric("size");
            List<Rat> average_lats = this.compute_averages(pipeline_latencies);
            List<Rat> average_sizes = this.compute_averages(pipeline_sizes);
            this.log(average_lats, average_sizes, zones);
            foreach(s in storages) s.reset();
            //LATENCY BASED POLICY////
            // Int toMove = this.service_to_move_lookup(average_lats); 
            // Int toCloud = this.edge_index_lookup();
            // Rat max_lat = nth(average_lats, toMove);
            // if(max_lat > lat_threshold() || max_lat == -1) this!migrate_to_edge(toCloud, toMove);
            // else if(nth(zones,toMove) == "edge" && max_lat < lat_threshold()) this!migrate_to_cloud(toMove);
            ///////

            ////BYTE BASED POLICY/////
            Int toMove = this.service_to_move_lookup(average_sizes); 
            Int toCloud = this.edge_index_lookup();
            Rat max_lat = nth(average_sizes, toMove);
            if(max_lat > byte_threshold() || max_lat == -1) this.migrate_to_edge(toCloud, toMove);
            else if(nth(zones,toMove) == "edge" && max_lat < byte_threshold()) this.migrate_to_cloud(toMove);
            ///////

            if(time % 2 == 0) this.update_sizes();
            time = time + 1;
        }
        println("STOP MONITOR");
    }


    Int service_to_move_lookup(List<Rat> values) {
        Rat max_value = -2;
        Int i = 0;
        Int toMove = -1;
        while(i < n_pipelines()) {
            Rat curr_val = nth(values, i);
            if(curr_val == -1) {
                toMove = i;
                i = n_pipelines();
            } else {
                if(max_value < curr_val) {
                    max_value = curr_val;
                    toMove = i; 
                }
            }
            i = i + 1;
        }
        return toMove;
    }

    Unit migrate_to_edge(Int toCloud, Int toMove) {
        if(toCloud == -1) {
            nth(cloud_migrations, toMove)!undeploy();
            nth(edge_migrations, toMove)!deploy();
        }
        else {
            if(toMove != toCloud) {
                nth(edge_migrations, toCloud)!undeploy();
                nth(cloud_migrations, toCloud)!deploy();
                nth(cloud_migrations, toMove)!undeploy();
                nth(edge_migrations, toMove)!deploy();
                nth(storages,toCloud)!setZone("cloud");
            }
        }
        nth(storages,toMove)!setZone("edge");
        this.update_zones(toMove);
    }

    Unit migrate_to_cloud(Int toMove) {
        nth(edge_migrations, toMove)!undeploy();
        nth(cloud_migrations, toMove)!deploy();
        nth(storages,toMove)!setZone("cloud");
        toMove = -1;
        this.update_zones(toMove);
    }


    Int edge_index_lookup() {
        Int target = -1;
        foreach(z,i in zones) {
            if(z == "edge") target = i;
        }
        return target;
    }

    Unit update_zones(Int toUpdate) {
        zones = list[];
        Int i = 0;
        while(i < n_pipelines()) {
            if(i != toUpdate) zones = appendright(zones, "cloud");
            else zones = appendright(zones, "edge");
            i = i + 1;
        }
    }    

    Unit update_sizes() {foreach(s in storages) s.update_size();}

    List<List<Rat>> fetch_metric(String metric) {
        List<List<Rat>> metrics_list = list[];
        foreach(s in storages) {
            List<Rat> m = list[];
            if(metric == "latency") m = s.get_latency_timeserie();
            else m = s.get_size_timeserie();
            metrics_list = appendright(metrics_list,m);
        }
        return metrics_list;
    }

    List<Rat> compute_averages(List<List<Rat>> list_values) {
        List<Rat> averages = list[];
        foreach(values in list_values) {
            Rat avg = -1;
            if(length(values) > 0) avg = foldl((Rat a, Rat b) => a + b)(values, 0) / length(values);
            averages = appendright(averages, avg);
        }
        return averages;
    }

    Unit log(List<Rat> avg_latencies,  List<Rat> avg_sizes, List<String> zones) {
         String toPrint = "";
         Int i = 0;
         while(i < n_pipelines()) {
            toPrint = toPrint + "Pipeline" + toString(i+1) + "[zone:" + nth(zones,i) + "]:"; 
            Float avg_size_mb = float(nth(avg_sizes,i) / pow(10,6));
            Float avg_lat_ms = float(1000 * nth(avg_latencies,i) / sec_to_time_unit());
            if(avg_lat_ms >= 0.0 && avg_size_mb >= 0.0) toPrint = toPrint + "(" + toString(avg_lat_ms) + "," + toString(avg_size_mb) + ") ";
            else {
                String zone = nth(zones,i);
                Rat t = 0;
                Int index = nth(storages,i).getIndex();
                Rat bytes = nth(nth(sizes(),i),index) * nth(nth(sizes(),i),index) * byte_header_size() / pow(10,6);
                if(zone == "cloud") t = 1000 * bytes * pow(10,6) / (sec_to_time_unit() * cloud_bandwidth());
                else t = 1000 * bytes * pow(10,6) / (sec_to_time_unit() * edge_bandwidth());
                toPrint = toPrint + "(" + toString(float(t)) + "," + toString(float(bytes)) + ") ";
            }
            i = i + 1;
         }
         println(toPrint);
    }
}